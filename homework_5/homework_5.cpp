#include <iostream>
#include <vector>
#include <list>
#include <deque>
#include <map>
#include <set>
#include <algorithm>
#include "function.h"



int main(int argc, char const *argv[])
{
	std::cout << "Задание №1" << std::endl;

	std::cout << "Vector" << std::endl;

	std::vector<std::string> vec = {"Создать", "шаблонную", "функцию", "которая", "принимает", "итераторы", "на", "начало", "и", "конец", "последовательности", "слов",
	"и", "выводящую", "в", "консоль", "список", "уникальных", "слов", "если", "слово", "повторяется", "больше", "1", "раза", "то", "вывести", "его", "надо", "один", "раз",
	"Продемонстрировать", "работу", "функции", "передав", "итераторы", "различных", "типов"};
	uni(vec.begin(), vec.end());

	std::cout << std::endl << "Deque" << std::endl;
	std::deque<std::string> deq = {"Создать", "шаблонную", "функцию", "которая", "принимает", "итераторы", "на", "начало", "и", "конец", "последовательности", "слов",
	"и", "выводящую", "в", "консоль", "список", "уникальных", "слов", "если", "слово", "повторяется", "больше", "1", "раза", "то", "вывести", "его", "надо", "один", "раз",
	"Продемонстрировать", "работу", "функции", "передав", "итераторы", "различных", "типов"};
	uni(deq.begin(), deq.end());

	std::cout << std::endl << "List" << std::endl;
	std::list<std::string> list = {"Создать", "шаблонную", "функцию", "которая", "принимает", "итераторы", "на", "начало", "и", "конец", "последовательности", "слов",
	"и", "выводящую", "в", "консоль", "список", "уникальных", "слов", "если", "слово", "повторяется", "больше", "1", "раза", "то", "вывести", "его", "надо", "один", "раз",
	"Продемонстрировать", "работу", "функции", "передав", "итераторы", "различных", "типов"};
	uni(list.begin(), list.end());

	std::cout << "_______________________" << std::endl;

	std::cout << "Задание №2" << std::endl;
	std::multiset<struct My_str> mset;

	struct My_str mstr;

	std::string str;
	
	// std::cout << "Введите текст: " << std::endl;
	// getline(std::cin, str);

	str = "По сути, параллелизм - это одновременное выполнение двух или более операций. В жизни он встречается везде: мы можем одновременно идти и разговаривать или одной рукой делать одно, а второй - другое. Говоря о параллелизме в контексте компьютеров, мы имеем в виду, что одна и та же система выполняет несколько независимых операций параллельно, а не последовательно. Исторически компьютеры, как правило, оснащались одним процессором с одним блоком обработки, или ядром. Такая машина способна исполнять только одну задачу в каждый момент времени, но может переключаться между задачами много раз в секунду. Таким образом, сначала одна задача немножко поработает, потом другая, а в итоге складывается впечатление, будто все происходит одновременно. Это называется переключением задач (технология HyperThreading).";

	int start = 0;
	int pos = 0;
	while (true)
	{	
		std::string delim = getDelims(str, start, pos); 	// Ищет разделитель (".", "!", "?") Не получилось в этой функции еще и pos менять. 
															// Тогда следующаяя строка не нужна была бы. Но видимо npos в функции getDelims и здесь это разные вещи.
		pos = str.find(delim, start);
		if(pos == std::string::npos) break;
		mstr.str = str.substr(start, ++pos - start);
		mset.insert(mstr);
		start = ++pos;
	}

	for(auto &s : mset)
	{
		std::cout << s.str << std::endl;
	}
	std::cout << "_______________________" << std::endl;
	return 0;
}